use anchor::prelude::*;
use solana_program::msg;
use solana_program::pubkey::Pubkey;
use strunery::strunery;

#[program]
pub mod strunery_solana_transfer {
    #[state]
    pub struct StrunerySolanaTransfer {
        
    }

    pub fn initialize(_ctx: Context<StrunerySolanaTransfer>) -> Result<()> {
        
        Ok(())
    }

    pub fn transfer_cad_to_cop(
        ctx: Context<TransferCadToCop>,
        amount_cad: u64,
        recipient_cop_account: Pubkey,
    ) -> Result<()> {
        if amount_cad == 0 {
            msg!("amount is not less than 0 ");
            return Err(ErrorCode::InvalidAmount);
        }

        
        let amount_cop = convert_cad_to_cop(amount_cad)?;

        strunery::transfer(
            ctx.accounts.from_account,
            ctx.accounts.to_account,
            amount_cop,
        )?;

        msg!("Transfer sucessfull", amount_cop, recipient_cop_account);

        Ok(())
    }
}

#[derive(Accounts)]
pub struct TransferCadToCop {
    #[account(mut)]
    pub from_account: Account<StruneryAccount>,
    #[account(mut)]
    pub to_account: Account<StruneryAccount>,
}

enum ErrorCode {
    InvalidAmount,
}

fn convert_cad_to_cop(amount_cad: u64) -> Result<u64> {
    // Implementación de la lógica de conversión de CAD a COP
    // Se puede usar un tipo de cambio actual o un oráculo
    // para obtener el valor de conversión preciso

    let exchange_rate = 0.8; // Ejemplo de tipo de cambio
    let amount_cop = (amount_cad as f64 * exchange_rate) as u64;

    Ok(amount_cop)
}